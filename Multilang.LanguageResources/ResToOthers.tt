<#@ template debug="true" hostSpecific="true" #>
<#@ output extension="log" #>
<#@ import namespace="System.Text" #>
<#@ include file="ResxToAndroidTemplate.tt" #>
<#
// Set the current directory to the .tt folder
Directory.SetCurrentDirectory(
Path.GetDirectoryName(Host.TemplateFile));
 
// Create instances of the templates for iOS and Android
ResxToAndroidTemplate r = new ResxToAndroidTemplate();
 
// Set the host to template object so that it
// can resolve file paths
r.Host = Host;
 
// Set the output project name so that the project files
// will be correctly updates
r.Output.Project =
@"..\Multilang.Android\Multilang.Android.csproj";

// Set the destination for the generated
// Android resource files
var DestFolder = @"Resources\values";
 
// Set the file mask for the resx files to read from
var files =
Directory.GetFiles(".", "AppResources*.resx");
 
foreach(var resxFile in files)
{
	// Fix up the file name
	r.ResxFileName = resxFile.Replace(".\\","");

	// For Android, we get the locale so we can
	// write to the correct folder
	string locale = r.GetLocale(resxFile);
 
	if (!(locale.Equals("qps-ploc",
	StringComparison.CurrentCultureIgnoreCase)))
	{
		if (!string.IsNullOrWhiteSpace(locale))
		{
			locale = "-" + locale.Replace("-", "").Substring(0,2).ToLower();
		}
 
		string AndroidStringsFolder = DestFolder + locale;
 
		// Set the destination filename and path and
		// transform the resource
		r.Output.File = Path.Combine(AndroidStringsFolder,
		Path.GetFileName(Path.ChangeExtension(
		r.GetNameSpace("strings"), ".xml")));
      
		r.Output.Encoding = Encoding.UTF8;
		r.Render();
	}
}
#>